/*	------------------------------------------------------------------------
	
   .FILE NAME
   Model_Conversion
	
   .DESCRIPTION
   Opens and balances model 
	Saves as version 4.7

   .VERSION
   1 - First version [18 March 2015] 
 	
	------------------------------------------------------------------------*/

int main()
{

   // Full path and name for the settings file.
   string sSettingsFile = "S:\TEST AREA\ac00418\model_conversion\settings\model_convert_settings_LRMM.ini";
   Settings defaultSettingsFile;
   double nScriptVersion = 1;



   // MODEL SETTINGS FROM INI FILE
   // ----------------------------
   // Workspace  
   string sWorkspace;
   // Warehouse   
   string sWarehouse;
   // Migrate to current version
   bool bMigrate = true;


   // AVERAGE SYSTEM PRESSURE REPORT
   // ------------------------------
   string sReportFile;
   // Path to report file save location
   string sReportPath;
   // 
   string sReportName;
   // Pre-existing Report
   string sReportASP = "Local Reports\ASP";
   Report newReport;


   // LOG SYNERGEE SCRIPT
   // -------------------
   // Text document to report to
   string sSynergeeLog, sSynergeeLog_temp;
   TextFile sSynergeeLogText;
   // List of converted models
   string sMinPressLog;
   TextFile sMinPressLogText;
   string sMinPressLog_temp;

   // Minimum Pressure Collection
   double minPress;
   string minPressLoc;



   // VARIABLES USED IN SCRIPT
   // ------------------------   
   // Success / fail check    
   bool bOK;
   // Log write succes / fail check
   bool bLogOK;
   long n;
   long nModelCount;
   long nModelCountDefault = 1;
   long nStartAt;
   string sMessage, sPressMessage;

   // Logs
   string sAnalysisLog, sGeneralLog, sValidationLog, sDataImportLog, sDataExportLog, sScriptLog; 
   string sAnalysisLog_temp, sGeneralLog_temp, sValidationLog_temp, sDataImportLog_temp, sDataExportLog_temp, sScriptLog_temp; 
   string sLogName;
   long nMessageLimit;


   // MODEL DATA
   string sModelNo;
   string sModel;
   string sModelName;
   string sLDZ, sRegion;
   string press_loaded, press_balanced, press_feasible, press_solved;


   // EXCHANGE FILES
   string sExportFile, sExportFile_temp;  // file to export to

   string sExportSettings; // settings file for exports

   string sExportWorksheet;   // export worksheet
   string sExportFlowCategoriesFile, sExportFlowCategoriesFile_temp;
   string sExportFlowCategoriesSettings;
   string sExportFlowCategoriesWorksheet;
   
   // DATE AND TIME
   // ------------- 
   string sDateFormatted;  
   DateTime dateTimeInfo;
   bOK = dateTimeInfo.SetToCurrentTime();
   sDateFormatted = dateTimeInfo.Format("%Y-%m-%d_%H-%M-%S");

   string sModelOutNo;
   string sModelOut;




   
   // LOAD SETTINGS FROM INI FILE
   // ===========================
   // Load settings file
   bOK = defaultSettingsFile.Setup(sSettingsFile);

   // Load Log
   sSynergeeLog_temp = defaultSettingsFile.GetText("", "LOGS", "script_log_synergee");
   sSynergeeLog = sSynergeeLog_temp + "_" + sDateFormatted + ".txt";
   sSynergeeLogText.Setup(sSynergeeLog);
   sSynergeeLogText.OpenClear();
   sMessage = "Begin script";
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = "Script Version: " + nScriptVersion;
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = "Settings File: " + sSettingsFile;
   sSynergeeLogText.WriteWithDateTime(sMessage);


   sMessage = " ";
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = "---------------------------------------------------------------";
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = " ";
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = "[SUPPLEMENTS]";
   sSynergeeLogText.WriteWithDateTime(sMessage);


   // Load workspace
   sWorkspace = defaultSettingsFile.GetText("", "SUPPLEMENTS", "workspace");
   sMessage = "Using workspace: " + sWorkspace;
   sSynergeeLogText.WriteWithDateTime(sMessage);

   // Load warehouse
   sWarehouse = defaultSettingsFile.GetText("", "SUPPLEMENTS", "warehouse");
   sMessage = "Using warehouse " + sWarehouse;
   sSynergeeLogText.WriteWithDateTime(sMessage);


   
   sMessage = " ";
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = "---------------------------------------------------------------";
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = " ";
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = "[MODEL DATA]";
   sSynergeeLogText.WriteWithDateTime(sMessage);



   // Load LDZ and region
   sLDZ = defaultSettingsFile.GetText("", "MODELSIN", "ldz_of_models");
   sMessage = "LDZ: " + sLDZ;
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sRegion = defaultSettingsFile.GetText("", "MODELSIN", "region_of_models");
   sMessage = "REGION: " + sRegion;
   sSynergeeLogText.WriteWithDateTime(sMessage);
   
   // Load number of models
   nModelCount = defaultSettingsFile.GetLong(nModelCountDefault, "MODELSIN", "number_of_models");
   sMessage = "Number of models: " + nModelCount;
   sSynergeeLogText.WriteWithDateTime(sMessage);
   // Start at
   nStartAt = defaultSettingsFile.GetLong(nModelCountDefault, "MODELSIN", "start_at");
   sMessage = "Start at: " + nStartAt;
   sSynergeeLogText.WriteWithDateTime(sMessage);



   sMessage = " ";
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = "---------------------------------------------------------------";
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = " ";
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = "[REPORTS & OUTPUTS]";
   sSynergeeLogText.WriteWithDateTime(sMessage);



   // Load ASP report location
   sReportPath = defaultSettingsFile.GetText("","OUTPUTS","asp_report");
   sMessage = "ASP Report is of form: model_name_asp.csv";
   sSynergeeLogText.WriteWithDateTime(sMessage);

   // Load and setup minimum pressures recording file
   sMinPressLog_temp = defaultSettingsFile.GetText("", "OUTPUTS", "minimum_pressures");
   sMinPressLog = sMinPressLog_temp + "_" + sDateFormatted + ".csv";
   sMinPressLogText.Setup(sMinPressLog);
   sMinPressLogText.OpenClear();
   sMessage = "Minimum Pressures Recording: " + sMinPressLog;
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sPressMessage = ",model,name,name_out,loaded,balanced,feasible,solved,min_pressure,location";
   sMinPressLogText.Write(sPressMessage);

   // Logs
   sAnalysisLog_temp = defaultSettingsFile.GetText(" ", "LOGS", "analysis_log");
   sAnalysisLog = sAnalysisLog_temp + "_" + sDateFormatted + ".csv";
   sMessage = "Analysis Log: " + sAnalysisLog;
   sSynergeeLogText.WriteWithDateTime(sMessage);
   // Script
   sScriptLog_temp = defaultSettingsFile.GetText(" ", "LOGS", "script_log");
   sScriptLog = sScriptLog_temp + "_" + sDateFormatted + ".csv";
   sMessage = "Script Log: " + sScriptLog;
   sSynergeeLogText.WriteWithDateTime(sMessage);
   // Validation
   sValidationLog_temp = defaultSettingsFile.GetText(" ", "LOGS", "validation_log");
   sValidationLog = sValidationLog_temp + "_" + sDateFormatted + ".csv";
   sMessage = "Validation Log: " + sValidationLog;
   sSynergeeLogText.WriteWithDateTime(sMessage);
   // Data Import
   sDataImportLog_temp = defaultSettingsFile.GetText(" ", "LOGS", "data_import_log");
   sDataImportLog = sDataImportLog_temp + "_" + sDateFormatted + ".csv";
   sMessage = "Data Import Log: " + sDataImportLog;
   sSynergeeLogText.WriteWithDateTime(sMessage);
   // Data Export
   sDataExportLog_temp = defaultSettingsFile.GetText(" ", "LOGS", "data_export_log");
   sDataExportLog = sDataExportLog_temp + "_" + sDateFormatted + ".csv";
   sMessage = "Data Export Log: " + sDataExportLog;
   sSynergeeLogText.WriteWithDateTime(sMessage);
   // General Log
   sGeneralLog_temp = defaultSettingsFile.GetText(" ", "LOGS", "general_log");
   sGeneralLog = sGeneralLog_temp + "_" + sDateFormatted + ".csv";
   sMessage = "General Log: " + sGeneralLog;
   sSynergeeLogText.WriteWithDateTime(sMessage);


   sExportFile_temp = defaultSettingsFile.GetText(" ","EXCHANGE", "exchangeExportFile");
   sExportSettings = defaultSettingsFile.GetText(" ","EXCHANGE", "exchangeExportSettings");
   sExportWorksheet = defaultSettingsFile.GetText(" ","EXCHANGE", "exchangeExportWorksheet");
   sMessage = " Export settings file: " + sExportSettings;
   sSynergeeLogText.WriteWithDateTime(sMessage);


   // Flow Categories exchange
   sExportFlowCategoriesFile_temp = defaultSettingsFile.GetText(" ","EXCHANGE", "exchangeFlowCategoriesFile");
   sExportFlowCategoriesSettings = defaultSettingsFile.GetText(" ","EXCHANGE", "exchangeFlowCategoriesSettings");
   sExportFlowCategoriesWorksheet = defaultSettingsFile.GetText(" ","EXCHANGE", "exchangeFlowCategoriesWorksheet");
   sMessage = " Export Flow Categories settings file: " + sExportFlowCategoriesSettings;
   sSynergeeLogText.WriteWithDateTime(sMessage);

   sMessage = " ";
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = "---------------------------------------------------------------";
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = " ";
   sSynergeeLogText.WriteWithDateTime(sMessage);

   sMessage = "Setup Complete";
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = "Begin model cycle";
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = " ";
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = "[MODELS]";
   sSynergeeLogText.WriteWithDateTime(sMessage);

   // Verify nStartAt
   if (nStartAt > nModelCount)
   {
      sMessage = "Model count is smaller than starting position (from settings file)";
      sSynergeeLogText.WriteWithDateTime(sMessage);
      sMessage = "Reverting to start from 1";
      sSynergeeLogText.WriteWithDateTime(sMessage);
      nStartAt = 1;
   }


   // Begin loop through models
   for (n=nStartAt; n<(nModelCount+1); n=n+1)
   {
      sMessage = " " + n + ". Load model data........................................";
      sSynergeeLogText.WriteWithDateTime(sMessage);
      sModelNo = "Model" + n;
      sModel = defaultSettingsFile.GetText("","MODELSIN",sModelNo);
      sMessage = " " + sModelNo + " : " + sModel;
      sSynergeeLogText.WriteWithDateTime(sMessage);
      sModelNo = "ModelName" + n;
      sModelName = defaultSettingsFile.GetText("","MODELNAMES",sModelNo);
      sMessage = " " + sModelNo + " : " + sModelName;
      sSynergeeLogText.WriteWithDateTime(sMessage);
      sModelOutNo = "ModelOut" + n;
      sModelOut = defaultSettingsFile.GetText("","MODELSOUT",sModelOutNo);
      sMessage = " " + sModelOutNo + " : " + sModelOut;
      sSynergeeLogText.WriteWithDateTime(sMessage);

      
      sExportFile = sExportFile_temp + sModelName + "_all_nodes.csv";
      sMessage = " Node export file: " + sExportFile;
      sSynergeeLogText.WriteWithDateTime(sMessage);
      
      sExportFlowCategoriesFile = sExportFlowCategoriesFile_temp + sModelName + "_flow_categories.csv";
      sMessage = " Flow Categories file: " + sExportFlowCategoriesFile;
      sSynergeeLogText.WriteWithDateTime(sMessage);

      sReportName = sReportPath + sModelName;
      sReportFile = sReportName + "_asp.csv";
      sMessage = "ASP Report: " + sReportFile;

      // Load the model
      bOK = Model.LoadDb(sModel, sWorkspace, sWarehouse, bMigrate);
      if (bOK)
      {
         sMessage = " ..........Model Load OK";
         sSynergeeLogText.WriteWithDateTime(sMessage);
         System.LogInfo(sMessage);
         press_loaded = "TRUE";
      }
      else
      {
         sMessage = " xxxxxxxxxx MODEL LOAD FAILED";
         sSynergeeLogText.WriteWithDateTime(sMessage);
         System.LogError(sMessage);
         press_loaded = "FALSE";
         break;
      }

      // Balance the model
      bOK = Analysis.Balance();
      if (bOK)
      {
         sMessage = " ..........Model Balance OK";
         sSynergeeLogText.WriteWithDateTime(sMessage);
         System.LogInfo(sMessage);
         press_balanced = "TRUE";
      }
      else
      {
         sMessage = " xxxxxxxxxx MODEL BALANCE FAILED";
         sSynergeeLogText.WriteWithDateTime(sMessage);
         System.LogError(sMessage);
         press_balanced = "FALSE";         
      }

      // Feasible?
      bOK = Analysis.IsModelFeasible();
      if (bOK)
      {
         sMessage = " ..........Model is Feasible";
         sSynergeeLogText.WriteWithDateTime(sMessage);
         System.LogInfo(sMessage);
         press_feasible = "TRUE";
      }
      else
      {
         sMessage = " xxxxxxxxxx MODEL NOT FEASIBLE";
         sSynergeeLogText.WriteWithDateTime(sMessage);
         System.LogError(sMessage);
         press_feasible = "FALSE";    
      }

      // Solved?
      bOK = Analysis.IsModelSolved();
      if (bOK)
      {
         sMessage = " ..........Model Solved OK";
         sSynergeeLogText.WriteWithDateTime(sMessage);
         System.LogInfo(sMessage);
         press_solved = "TRUE";
      }
      else
      {
         sMessage = " xxxxxxxxxx MODEL SOLVED FAILED";
         sSynergeeLogText.WriteWithDateTime(sMessage);
         System.LogError(sMessage);
         press_solved = "FALSE";
         System.LogError(sMessage);         
      }

      // Find lowest modelled pressure
      minPress = Model.MinPressure;
      minPressLoc = Model.MinPressureLocation;
      sMessage = " ," + sModelName + "," + sModel + "," + sModelOut + "," + press_loaded + "," + press_balanced + "," + press_feasible + "," + press_solved + "," + minPress + "," + minPressLoc;
      sMinPressLogText.Write(sMessage);

      
      // Save as LRMM model
      bOK = Model.SaveDb(sModelOut, bMigrate);
      if (bOK)
      {
         sMessage = " ..........Model Saved OK";
         sSynergeeLogText.WriteWithDateTime(sMessage);
      }
      else
      {
         sMessage = " xxxxxxxxxx MODEL SAVE FAILED";
         sSynergeeLogText.WriteWithDateTime(sMessage);
         System.LogError(sMessage);
      }

      // Export all node data
      bOK = Model.ExportExchangeFile(sExportSettings, sExportFile, sExportWorksheet);
      if (bOK)
      {
         sMessage = " ..........Model EXPORT OK";
         sSynergeeLogText.WriteWithDateTime(sMessage);
      }
      else
      {
         sMessage = " xxxxxxxxxx MODEL EXPORT FAILED";
         sSynergeeLogText.WriteWithDateTime(sMessage);
         System.LogError(sMessage);
      }

      // Export flow categories
      bOK = Model.ExportExchangeFile(sExportFlowCategoriesSettings, sExportFlowCategoriesFile, sExportFlowCategoriesWorksheet);
      if (bOK)
      {
         sMessage = " ..........Flow Categories EXPORT OK";
         sSynergeeLogText.WriteWithDateTime(sMessage);
      }
      else
      {
         sMessage = " xxxxxxxxxx Flow Categories EXPORT FAILED";
         sSynergeeLogText.WriteWithDateTime(sMessage);
         System.LogError(sMessage);
      }

      // Subsystem trace
      Subsystem.UsePhysicalBorders = true;
      bOK = Subsystem.Trace();
      if (bOK)
      {
         sMessage = "..........Subsystem Trace OK";
         sSynergeeLogText.WriteWithDateTime(sMessage);
         System.LogInfo(sMessage);
      }
      else
      {
         sMessage = "xxxxxxxxxx Subsystem Trace FAILED";
         sSynergeeLogText.WriteWithDateTime(sMessage);
         System.LogError(sMessage);
      }

       // open ASP Report
      bOK = newReport.Setup(sReportASP);
      if (bOK)
      {
         sMessage = "..........ASP Report Setup OK";
         sSynergeeLogText.WriteWithDateTime(sMessage);
         System.LogInfo(sMessage);
      }
      else
      {
         sMessage = "xxxxxxxxxx ASP Report Setup FAILED";
         sSynergeeLogText.WriteWithDateTime(sMessage);
         System.LogError(sMessage);         
      }

      // Generate report
      bOK = newReport.Generate();
      bOK = newReport.SaveData(sReportFile);
      if (bOK)
      {
         sMessage = "..........ASP Report Save OK";
         sSynergeeLogText.WriteWithDateTime(sMessage);
         System.LogInfo(sMessage);
      }
      else
      {
         sMessage = "xxxxxxxxxx ASP Report Save FAILED";
         sSynergeeLogText.WriteWithDateTime(sMessage);
         System.LogError(sMessage);         
      }
      
      sMessage = "Done: ... " + sModelName;
      sSynergeeLogText.WriteWithDateTime(sMessage);
      System.LogInfo(sMessage);
   }

   sMessage = "Finished batch";
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = " ";
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = "Write synergee logs to file";
   sSynergeeLogText.WriteWithDateTime(sMessage);

   // Save logs
   sLogName = "General";
   nMessageLimit = 0;
   bOK = System.SendLogToCSV(sLogName, sGeneralLog, nMessageLimit);

   sLogName = "Analysis";
   nMessageLimit = 0;
   bOK = System.SendLogToCSV(sLogName, sAnalysisLog, nMessageLimit);

   sLogName = "Scripting";
   nMessageLimit = 0;
   bOK = System.SendLogToCSV(sLogName, sScriptLog, nMessageLimit);

   sLogName = "Data Import";
   nMessageLimit = 0;
   bOK = System.SendLogToCSV(sLogName, sDataImportLog, nMessageLimit);

   sLogName = "Data Export";
   nMessageLimit = 0;
   bOK = System.SendLogToCSV(sLogName, sDataExportLog, nMessageLimit);

   // Save Validation Log
   sValidationLog = sValidationLog;
   sLogName = "Validation";
   nMessageLimit = 0;
   bOK = System.SendLogToCSV(sLogName, sValidationLog, nMessageLimit);

   sMessage = " ";
   sSynergeeLogText.WriteWithDateTime(sMessage);
   sMessage = "DONE";
   sSynergeeLogText.WriteWithDateTime(sMessage);

   sSynergeeLogText.Close();
   sMinPressLogText.Close();


   return 0;

}
